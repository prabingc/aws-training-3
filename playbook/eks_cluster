pipeline {
    agent any
    environment {
    jenkin_cred = credentials('jenkins_call') // Reference the credentials ID
    }
    stages {
        stage('Create new pipelines') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'jenkins_call', usernameVariable: 'JENKINS_USER', passwordVariable: 'JENKINS_TOKEN')]) {
                sh '''
                    curl -O http://localhost:8080/jnlpJars/jenkins-cli.jar
                    if java -jar jenkins-cli.jar -s http://localhost:8080  -auth "$JENKINS_USER:$JENKINS_TOKEN" get-job build_images > /dev/null 2>&1; then
                        echo "Updating existing build_images"
                        java -jar jenkins-cli.jar -s http://localhost:8080  -auth "$JENKINS_USER:$JENKINS_TOKEN" update-job build_images < jenkins_item/docker_build.xml
                    else
                        echo "Createing new build_images"
                        java -jar jenkins-cli.jar -s http://localhost:8080  -auth "$JENKINS_USER:$JENKINS_TOKEN" create-job build_images < jenkins_item/docker_build.xml
                    fi
                                        
                    if java -jar jenkins-cli.jar -s http://localhost:8080  -auth "$JENKINS_USER:$JENKINS_TOKEN" get-job create_pods > /dev/null 2>&1; then
                        echo "Updating existing create_pods"
                        java -jar jenkins-cli.jar -s http://localhost:8080  -auth "$JENKINS_USER:$JENKINS_TOKEN" update-job create_pods < jenkins_item/create_pods.xml
                    else
                        echo "Createing new create_pods"
                        java -jar jenkins-cli.jar -s http://localhost:8080  -auth "$JENKINS_USER:$JENKINS_TOKEN" create-job create_pods < jenkins_item/create_pods.xml
                    fi
                '''
                    }
                }
        }
        stage('Load Shared Vars') {
            steps {
                script {
                def vars = load 'vars/sharedVars.groovy'
                env.AWS_REGION = vars.AWS_REGION
                env.CLUSTER_NAME = vars.CLUSTER_NAME
                }
            }
            }  
        stage('Create EKS Cluster') {
                    steps {
                        script {
                            withAWS(credentials: 'aws-creds', region: env.AWS_REGION) {
                                def clusterExists = sh(
                                    script: "eksctl get cluster --name ${CLUSTER_NAME} --region ${AWS_REGION}",
                                    returnStatus: true
                                ) == 0
                                if (clusterExists) {
                                    echo "EKS Cluster '${CLUSTER_NAME}' already exists. Skipping creation."
                                    } 
                                else {
                                sh """
                                export CLUSTER_NAME=${CLUSTER_NAME}
                                envsubst < cluster_definition.yaml > processed.yaml
                                eksctl create cluster -f processed.yaml
                                """
                                }
                            }
                        }
                    }
                }
            }
        post {
          success {
              echo 'Triggering Next Stage pipeline...'
              build job: 'build_images',
              wait : false 
          }
          failure {
              echo 'Cluster build failed. Not triggering build images Pipeline.'
          }
        }
    }